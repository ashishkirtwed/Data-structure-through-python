from collections import defaultdict
class Vertex:                                 #vertex class to create Nodes of the graph 
    def __init__(self, node):
        self.id = node
        self.adjacent = {}

    #def __str__(self):
    #    return str(self.id) + ' adjacent: ' + str([x.id for x in self.adjacent])

    def add_neighbor(self, neighbor, weight=0):         #Will add neighbour of a vertex object with default weight 0
        self.adjacent[neighbor] = weight

    def get_connections(self):                          #will return all the the adjacent vertex of a vertex 
        return self.adjacent.keys()  

    def get_id(self):                                   #will return the id of the vertex
        return self.id

    def get_weight(self, neighbor):                     #will return the weight between two adjacent nodes if they are linked 
        return self.adjacent[neighbor]

class Graph:                                   # Graph Class to create Graph Object 
    def __init__(self):
        self.vert_dict = {}
        self.num_vertices = 0

    def __iter__(self):
        return iter(self.vert_dict.values())

    def add_vertex(self, node):
        self.num_vertices = self.num_vertices + 1
        new_vertex = Vertex(node)
        self.vert_dict[node] = new_vertex
        return new_vertex

    def get_vertex(self, n):                  
        if n in self.vert_dict:
            return self.vert_dict[n]
        else:
            return None

    def add_edge(self, frm, to, cost = 0):     #Add an edge between two vertices "frm" and "to" with default "cost=0"
        if frm not in self.vert_dict:
            self.add_vertex(frm)
        if to not in self.vert_dict:
            self.add_vertex(to)

        self.vert_dict[frm].add_neighbor(self.vert_dict[to], cost)
        self.vert_dict[to].add_neighbor(self.vert_dict[frm], cost)

    def get_vertices(self):                     #Returns all the vertices present in the graph
        return self.vert_dict.keys()
    def dfshelper(self,v,visited):              #Depth First Search Helper Function
        visited[v]=True
        print(v,end=" ")
        for i in self.vert_dict.keys():
            if visited[i]==False:
                self.dfshelper(i,visited)
    def dfs(self,source):                         #Depth First Search 
        n=self.num_vertices
        visited=defaultdict(dict)
        for i in self.vert_dict.keys():
            visited[i]=False
        self.dfshelper(source,visited)
    
        

if __name__ == '__main__':
    g = Graph()
    g.add_vertex('a')
    #g.add_vertex('b')
    g.add_vertex('c')
    g.add_vertex('d')
    g.add_vertex('e')
    g.add_vertex('f')
    g.add_edge('a', 'b', 4)  
    g.add_edge('a', 'c', 2)
    g.add_edge('a', 'f', 4)
    g.add_edge('b', 'c', 0)
    g.add_edge('b', 'd', 1)
    g.add_edge('c', 'd', 5)
    g.add_edge('c', 'f', 2)
    g.add_edge('d', 'e', 6)
    g.add_edge('e', 'f', 9)
    print(map(str,g))
    print(g.num_vertices)
    print(g.dfs('a'))

    for v in g:
        for w in v.get_connections():
            vid = v.get_id()
            wid = w.get_id()
            print('( %s , %s, %3d)'  % ( vid, wid, v.get_weight(w)))


